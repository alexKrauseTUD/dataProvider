// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/proto/WorkItem.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fproto_2fWorkItem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_src_2fproto_2fWorkItem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_src_2fproto_2fWorkItem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fproto_2fWorkItem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fproto_2fWorkItem_2eproto;
class WorkItem;
class WorkItemDefaultTypeInternal;
extern WorkItemDefaultTypeInternal _WorkItem_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::WorkItem* Arena::CreateMaybeMessage<::WorkItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum PredicateType : int {
  TYPE_INTEGER = 0,
  TYPE_FLOAT = 1,
  TYPE_STRING = 2
};
bool PredicateType_IsValid(int value);
constexpr PredicateType PredicateType_MIN = TYPE_INTEGER;
constexpr PredicateType PredicateType_MAX = TYPE_STRING;
constexpr int PredicateType_ARRAYSIZE = PredicateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PredicateType_descriptor();
template<typename T>
inline const std::string& PredicateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PredicateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PredicateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PredicateType_descriptor(), enum_t_value);
}
inline bool PredicateType_Parse(
    const std::string& name, PredicateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PredicateType>(
    PredicateType_descriptor(), name, value);
}
enum CompType : int {
  COMP_LT = 0,
  COMP_LE = 1,
  COMP_EQ = 2,
  COMP_GE = 3,
  COMP_GT = 4,
  COMP_NE = 5
};
bool CompType_IsValid(int value);
constexpr CompType CompType_MIN = COMP_LT;
constexpr CompType CompType_MAX = COMP_NE;
constexpr int CompType_ARRAYSIZE = CompType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompType_descriptor();
template<typename T>
inline const std::string& CompType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompType_descriptor(), enum_t_value);
}
inline bool CompType_Parse(
    const std::string& name, CompType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompType>(
    CompType_descriptor(), name, value);
}
// ===================================================================

class WorkItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorkItem) */ {
 public:
  inline WorkItem() : WorkItem(nullptr) {};
  virtual ~WorkItem();

  WorkItem(const WorkItem& from);
  WorkItem(WorkItem&& from) noexcept
    : WorkItem() {
    *this = ::std::move(from);
  }

  inline WorkItem& operator=(const WorkItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkItem& operator=(WorkItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkItem* internal_default_instance() {
    return reinterpret_cast<const WorkItem*>(
               &_WorkItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkItem& a, WorkItem& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkItem* New() const final {
    return CreateMaybeMessage<WorkItem>(nullptr);
  }

  WorkItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkItem& from);
  void MergeFrom(const WorkItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorkItem";
  }
  protected:
  explicit WorkItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fproto_2fWorkItem_2eproto);
    return ::descriptor_table_src_2fproto_2fWorkItem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTable1FieldNumber = 5,
    kTable2FieldNumber = 6,
    kOperatorIdFieldNumber = 1,
    kPredicate1FieldNumber = 3,
    kPredicate2FieldNumber = 4,
    kCompTypeFieldNumber = 2,
  };
  // optional string table_1 = 5;
  bool has_table_1() const;
  private:
  bool _internal_has_table_1() const;
  public:
  void clear_table_1();
  const std::string& table_1() const;
  void set_table_1(const std::string& value);
  void set_table_1(std::string&& value);
  void set_table_1(const char* value);
  void set_table_1(const char* value, size_t size);
  std::string* mutable_table_1();
  std::string* release_table_1();
  void set_allocated_table_1(std::string* table_1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_table_1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_table_1(
      std::string* table_1);
  private:
  const std::string& _internal_table_1() const;
  void _internal_set_table_1(const std::string& value);
  std::string* _internal_mutable_table_1();
  public:

  // optional string table_2 = 6;
  bool has_table_2() const;
  private:
  bool _internal_has_table_2() const;
  public:
  void clear_table_2();
  const std::string& table_2() const;
  void set_table_2(const std::string& value);
  void set_table_2(std::string&& value);
  void set_table_2(const char* value);
  void set_table_2(const char* value, size_t size);
  std::string* mutable_table_2();
  std::string* release_table_2();
  void set_allocated_table_2(std::string* table_2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_table_2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_table_2(
      std::string* table_2);
  private:
  const std::string& _internal_table_2() const;
  void _internal_set_table_2(const std::string& value);
  std::string* _internal_mutable_table_2();
  public:

  // optional int32 operatorId = 1;
  bool has_operatorid() const;
  private:
  bool _internal_has_operatorid() const;
  public:
  void clear_operatorid();
  ::PROTOBUF_NAMESPACE_ID::int32 operatorid() const;
  void set_operatorid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operatorid() const;
  void _internal_set_operatorid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PredicateType predicate_1 = 3 [default = TYPE_INTEGER];
  bool has_predicate_1() const;
  private:
  bool _internal_has_predicate_1() const;
  public:
  void clear_predicate_1();
  ::PredicateType predicate_1() const;
  void set_predicate_1(::PredicateType value);
  private:
  ::PredicateType _internal_predicate_1() const;
  void _internal_set_predicate_1(::PredicateType value);
  public:

  // optional .PredicateType predicate_2 = 4 [default = TYPE_INTEGER];
  bool has_predicate_2() const;
  private:
  bool _internal_has_predicate_2() const;
  public:
  void clear_predicate_2();
  ::PredicateType predicate_2() const;
  void set_predicate_2(::PredicateType value);
  private:
  ::PredicateType _internal_predicate_2() const;
  void _internal_set_predicate_2(::PredicateType value);
  public:

  // optional .CompType compType = 2 [default = COMP_EQ];
  bool has_comptype() const;
  private:
  bool _internal_has_comptype() const;
  public:
  void clear_comptype();
  ::CompType comptype() const;
  void set_comptype(::CompType value);
  private:
  ::CompType _internal_comptype() const;
  void _internal_set_comptype(::CompType value);
  public:

  // @@protoc_insertion_point(class_scope:WorkItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_2_;
  ::PROTOBUF_NAMESPACE_ID::int32 operatorid_;
  int predicate_1_;
  int predicate_2_;
  int comptype_;
  friend struct ::TableStruct_src_2fproto_2fWorkItem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkItem

// optional int32 operatorId = 1;
inline bool WorkItem::_internal_has_operatorid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WorkItem::has_operatorid() const {
  return _internal_has_operatorid();
}
inline void WorkItem::clear_operatorid() {
  operatorid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkItem::_internal_operatorid() const {
  return operatorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkItem::operatorid() const {
  // @@protoc_insertion_point(field_get:WorkItem.operatorId)
  return _internal_operatorid();
}
inline void WorkItem::_internal_set_operatorid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  operatorid_ = value;
}
inline void WorkItem::set_operatorid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operatorid(value);
  // @@protoc_insertion_point(field_set:WorkItem.operatorId)
}

// optional .CompType compType = 2 [default = COMP_EQ];
inline bool WorkItem::_internal_has_comptype() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WorkItem::has_comptype() const {
  return _internal_has_comptype();
}
inline void WorkItem::clear_comptype() {
  comptype_ = 2;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::CompType WorkItem::_internal_comptype() const {
  return static_cast< ::CompType >(comptype_);
}
inline ::CompType WorkItem::comptype() const {
  // @@protoc_insertion_point(field_get:WorkItem.compType)
  return _internal_comptype();
}
inline void WorkItem::_internal_set_comptype(::CompType value) {
  assert(::CompType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  comptype_ = value;
}
inline void WorkItem::set_comptype(::CompType value) {
  _internal_set_comptype(value);
  // @@protoc_insertion_point(field_set:WorkItem.compType)
}

// optional .PredicateType predicate_1 = 3 [default = TYPE_INTEGER];
inline bool WorkItem::_internal_has_predicate_1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WorkItem::has_predicate_1() const {
  return _internal_has_predicate_1();
}
inline void WorkItem::clear_predicate_1() {
  predicate_1_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PredicateType WorkItem::_internal_predicate_1() const {
  return static_cast< ::PredicateType >(predicate_1_);
}
inline ::PredicateType WorkItem::predicate_1() const {
  // @@protoc_insertion_point(field_get:WorkItem.predicate_1)
  return _internal_predicate_1();
}
inline void WorkItem::_internal_set_predicate_1(::PredicateType value) {
  assert(::PredicateType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  predicate_1_ = value;
}
inline void WorkItem::set_predicate_1(::PredicateType value) {
  _internal_set_predicate_1(value);
  // @@protoc_insertion_point(field_set:WorkItem.predicate_1)
}

// optional .PredicateType predicate_2 = 4 [default = TYPE_INTEGER];
inline bool WorkItem::_internal_has_predicate_2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WorkItem::has_predicate_2() const {
  return _internal_has_predicate_2();
}
inline void WorkItem::clear_predicate_2() {
  predicate_2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PredicateType WorkItem::_internal_predicate_2() const {
  return static_cast< ::PredicateType >(predicate_2_);
}
inline ::PredicateType WorkItem::predicate_2() const {
  // @@protoc_insertion_point(field_get:WorkItem.predicate_2)
  return _internal_predicate_2();
}
inline void WorkItem::_internal_set_predicate_2(::PredicateType value) {
  assert(::PredicateType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  predicate_2_ = value;
}
inline void WorkItem::set_predicate_2(::PredicateType value) {
  _internal_set_predicate_2(value);
  // @@protoc_insertion_point(field_set:WorkItem.predicate_2)
}

// optional string table_1 = 5;
inline bool WorkItem::_internal_has_table_1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkItem::has_table_1() const {
  return _internal_has_table_1();
}
inline void WorkItem::clear_table_1() {
  table_1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WorkItem::table_1() const {
  // @@protoc_insertion_point(field_get:WorkItem.table_1)
  return _internal_table_1();
}
inline void WorkItem::set_table_1(const std::string& value) {
  _internal_set_table_1(value);
  // @@protoc_insertion_point(field_set:WorkItem.table_1)
}
inline std::string* WorkItem::mutable_table_1() {
  // @@protoc_insertion_point(field_mutable:WorkItem.table_1)
  return _internal_mutable_table_1();
}
inline const std::string& WorkItem::_internal_table_1() const {
  return table_1_.Get();
}
inline void WorkItem::_internal_set_table_1(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  table_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorkItem::set_table_1(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  table_1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WorkItem.table_1)
}
inline void WorkItem::set_table_1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  table_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WorkItem.table_1)
}
inline void WorkItem::set_table_1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  table_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WorkItem.table_1)
}
inline std::string* WorkItem::_internal_mutable_table_1() {
  _has_bits_[0] |= 0x00000001u;
  return table_1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorkItem::release_table_1() {
  // @@protoc_insertion_point(field_release:WorkItem.table_1)
  if (!_internal_has_table_1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return table_1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkItem::set_allocated_table_1(std::string* table_1) {
  if (table_1 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WorkItem.table_1)
}
inline std::string* WorkItem::unsafe_arena_release_table_1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WorkItem.table_1)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return table_1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WorkItem::unsafe_arena_set_allocated_table_1(
    std::string* table_1) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (table_1 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      table_1, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WorkItem.table_1)
}

// optional string table_2 = 6;
inline bool WorkItem::_internal_has_table_2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WorkItem::has_table_2() const {
  return _internal_has_table_2();
}
inline void WorkItem::clear_table_2() {
  table_2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WorkItem::table_2() const {
  // @@protoc_insertion_point(field_get:WorkItem.table_2)
  return _internal_table_2();
}
inline void WorkItem::set_table_2(const std::string& value) {
  _internal_set_table_2(value);
  // @@protoc_insertion_point(field_set:WorkItem.table_2)
}
inline std::string* WorkItem::mutable_table_2() {
  // @@protoc_insertion_point(field_mutable:WorkItem.table_2)
  return _internal_mutable_table_2();
}
inline const std::string& WorkItem::_internal_table_2() const {
  return table_2_.Get();
}
inline void WorkItem::_internal_set_table_2(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  table_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorkItem::set_table_2(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  table_2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WorkItem.table_2)
}
inline void WorkItem::set_table_2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  table_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WorkItem.table_2)
}
inline void WorkItem::set_table_2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  table_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WorkItem.table_2)
}
inline std::string* WorkItem::_internal_mutable_table_2() {
  _has_bits_[0] |= 0x00000002u;
  return table_2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorkItem::release_table_2() {
  // @@protoc_insertion_point(field_release:WorkItem.table_2)
  if (!_internal_has_table_2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return table_2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkItem::set_allocated_table_2(std::string* table_2) {
  if (table_2 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  table_2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WorkItem.table_2)
}
inline std::string* WorkItem::unsafe_arena_release_table_2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WorkItem.table_2)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return table_2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WorkItem::unsafe_arena_set_allocated_table_2(
    std::string* table_2) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (table_2 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  table_2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      table_2, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WorkItem.table_2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PredicateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PredicateType>() {
  return ::PredicateType_descriptor();
}
template <> struct is_proto_enum< ::CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CompType>() {
  return ::CompType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_src_2fproto_2fWorkItem_2eproto
